version: "3.8"

volumes:
  prometheus-data:
  grafana-data:
  postgres-data:
  pgadmin-data:
  flower-data:

networks:
  front-tier:
  back-tier:

services:
  
  ####################################
  # Prometheus enregistre des métriques en temps réel dans une base de données de séries temporelles.
  # Pour enregistrer les métrique, Prometheus se base sur le contenu de point d'entrée exposé à l'aide du protocole HTTP (/metrics).
  # Son rôle est de collecter les métriques de chaque service.
  # 
  prometheus:
    image: prom/prometheus:latest
    hostname: prometheus
    container_name: prometheus
    deploy:
      replicas: 1
    volumes:
      - prometheus-data:/prometheus
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./alertmanager/alert.rules/alerts.rules.yml:/alertmanager/alert.rules/alerts.rules.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=365d'
    ports:
      - 9090:9090
    networks:
      - back-tier
    restart: always
  
  ####################################
  # Exporte les métriques de la machine
  # 
  node_exporter:
    image: prom/node-exporter:latest
    hostname: node-exporter
    container_name: node-exporter
    deploy:
      replicas: 1
    ports:
      - 9100:9100
    networks:
      - back-tier
    restart: always
  
  ####################################
  # Gestionnaire d'alertes
  # 
  alertmanager:
    image: prom/alertmanager:latest
    hostname: alertmanager
    container_name: alertmanager
    deploy:
      replicas: 1
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - ./alertmanager/templates/default.tmpl:/etc/alertmanager/templates/default.tmpl
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
    ports:
      - 9093:9093
    networks:
      - back-tier
    restart: always
  
  ####################################
  # Permet la visualisation de données. Il permet de réaliser des tableaux de bord et des graphiques depuis plusieurs sources dont des bases de données temporelles 
  # Monitoring des métriques
  # 
  grafana:
    image: grafana/grafana:latest
    hostname: grafana
    container_name: grafana
    deploy:
      replicas: 1
    environment:
      - GF_PATHS_CONFIG=/etc/grafana/grafana.ini
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
      - ./grafana/dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - 3000:3000
    networks:
      - back-tier
    depends_on:
      - prometheus
    restart: always
  
  ####################################
  # Base de donnée relationnelle
  # 
  postgres:
    image: postgres:latest
    hostname: postgres
    container_name: postgres
    deploy:
      replicas: 1
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/create_tables.sql:/docker-entrypoint-initdb.d/create_tables.sql # copy the sql script to create tables
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "postgres" ]
      timeout: 45s
      interval: 10s
      retries: 10
    ports:
      - 5432:5432
    networks:
      - back-tier
    restart: unless-stopped
  
  ####################################
  # Exporte des métriques de la base de données
  # 
  postgres-exporter:
    image: bitnami/postgres-exporter:latest
    hostname: postgres-exporter
    container_name: postgres-exporter
    deploy:
      replicas: 1
    environment:
      DATA_SOURCE_URI: postgres:5432/postgres?sslmode=disable
      DATA_SOURCE_USER: postgres
      DATA_SOURCE_PASS: postgres
    ports:
      - 9187:9187
    networks:
      - back-tier
    depends_on:
      - postgres
    restart: always
  
  ####################################
  # Administration de la base de donnée relationnelle
  # 
  pgadmin:
    image: dpage/pgadmin4:latest
    hostname: pgadmin
    container_name: pgadmin
    deploy:
      replicas: 1
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@domain.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    ports:
      - 5050:80
    networks:
      - back-tier
    depends_on:
      - postgres
    restart: unless-stopped
  
  #####################################
  ## Service intermédiaire qui permet de collecter des métriques à partir de jobs qui ne peuvent pas être récupérés (scraped) 
  ## 
  #pushgateway:
  #  image: prom/pushgateway:latest
  #  hostname: pushgateway
  #  container_name: pushgateway
  #  deploy:
  #    replicas: 1
  #  ports:
  #    - 9091:9091
  #  networks:
  #    - back-tier
  #  restart: always
  
  #####################################
  ## Moteur d'indexation et d'analyse de données utilisé pour indexer les logs
  ## 
  #elasticsearch:
  #  image: elasticsearch:latest
  #  hostname: elasticsearch
  #  container_name: elasticsearch
  #  deploy:
  #    replicas: 1
  #  ports:
  #    - 9200:9200
  #  networks:
  #    - back-tier
  #  restart: always
  
  #####################################
  ## Monitoring des logs basé sur Elasticsearch
  ## 
  #kibana:
  #  image: kibana:latest
  #  hostname: kibana
  #  container_name: kibana
  #  deploy:
  #    replicas: 1
  #  environment:
  #    ELASTICSEARCH_URL: http://elasticsearch:9200
  #  networks:
  #    - back-tier
  #  ports:
  #    - 5601:5601
  #  depends_on:
  #    - elasticsearch
  #  restart: always
  
  ####################################
  # Agent de messages pour celery (broker), il est utilisé comme middleware entre des producers et des workers
  # Exporte ses propres métriques
  # 
  rabbitmq:
    image: rabbitmq:3-management
    hostname: rabbitmq
    container_name: rabbitmq
    deploy:
      replicas: 1
    ports:
      - 5672:5672
      - 15672:15672
    networks:
      - back-tier
    restart: unless-stopped
  
  ####################################
  # Mémoire cache pour celery (result backend), il est utilisé comme middleware entre des producers et des workers
  # 
  redis:
    image: redis:latest
    hostname: redis
    container_name: redis
    deploy:
      replicas: 1
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - 6379:6379
    networks:
      - back-tier
    restart: unless-stopped
  
  ####################################
  # Exporteur des métriques redis
  # 
  redis-exporter:
    image: bitnami/redis-exporter:latest
    hostname: redis-exporter
    container_name: redis-exporter
    environment:
      REDIS_ADDR: redis://redis:6379
    ports:
      - 9121:9121
    networks:
      - back-tier
    depends_on:
      - redis
    restart: always
  
  ####################################
  # Exporteur des métriques celery & monitoring des workers
  # 
  flower:
    build:
      context: ./flower
    hostname: flower
    container_name: flower
    deploy:
      replicas: 1
    volumes:
      - flower-data:/var/
    command: [
      "celery", 
      "--broker=pyamqp://guest:guest@rabbitmq:5672//", 
      "flower", 
      "--broker-api=http://guest:guest@rabbitmq:15672/api/", 
      "--backend=redis://redis:6379/0", 
      "--port=5555", 
      "--persistent=True", 
      "--db=/var/flower.db"]
    ports:
      - 5555:5555
    networks:
      - back-tier
    depends_on:
      - rabbitmq
      - redis
    restart: always
  
  ####################################
  # API REST basée sur FastAPI
  # Contiens :
  # - des requêtes à la base de donnée relationnelle
  # Producteur de tâches celery
  # 
  project-api:
    build:
      context: ./project-api
    hostname: project-api
    container_name: project-api
    deploy:
      replicas: 1
    command: [
      "uvicorn", 
      "api:app", 
      "--host", 
      "0.0.0.0", 
      "--port", 
      "5000", 
      "--workers", 
      "2", 
      "--log-level", 
      "info"]
    environment:
      POSTGRES_DATABASE_URL: postgresql+asyncpg://postgres:postgres@postgres/postgres
      CELERY_BROKER_URL: pyamqp://guest:guest@rabbitmq:5672//
      CELERY_RESULT_BACKEND_URL: redis://redis:6379/0 
    ports:
      - 5000:5000
    networks:
      - back-tier
      - front-tier
    depends_on:
      - rabbitmq
      - redis
    restart: always
  
  ####################################
  # Worker basé sur celery
  # 2 Replicas sont créer pour la démo
  # 
  project-worker:
    build:
      context: ./project-worker
    #hostname: project-worker
    #container_name: project-worker
    deploy:
      replicas: 2
    command: [
      "celery", 
      "-A", 
      "tasks:app", 
      "worker", 
      "--pool", 
      "prefork", 
      "-Q", 
      "project-worker", 
      "--concurrency=2", 
      "-n", 
      "project-worker@%h",  
      "--loglevel", 
      "INFO"]
    environment:
      CELERY_BROKER_URL: pyamqp://guest:guest@rabbitmq:5672//
      CELERY_RESULT_BACKEND_URL: redis://redis:6379/0 
    networks:
      - back-tier
    depends_on:
      - rabbitmq
      - redis
    restart: always
