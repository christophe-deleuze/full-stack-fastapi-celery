# -*- coding: utf-8 -*-

from typing import List

from celery import Celery
from celery.utils.log import get_task_logger

from app.core.config import settings

logger = get_task_logger(__name__)

app = Celery(name='worker', broker=settings.CELERY_BROKER_URL, backend=settings.CELERY_RESULT_BACKEND_URL)
app.conf.update(
    redis_socket_keepalive=True,  # Keep healthy connection with redis
    accept_content=['application/json', 'application/x-python-serialize']
)


@app.task(
    name="integer-multiplication",
    bind=True,  # Give us access to task instance through self
    worker_prefetch_multiplier=1,  # prefetching is not disable, but reduce to the minimum
    max_retries=settings.CELERY_MAX_RETRIES,
    task_time_limit=settings.CELERY_TASK_TIME_LIMIT,
    task_soft_time_limit=settings.CELERY_TASK_SOFT_TIME_LIMIT)
def integer_multiplication(self, integer: int, multiply_by: int = 2) -> int:
    """ celery task - multiplication with an integer (default *2) """

    try:
        return integer * multiply_by

    except Exception as exc:
        logger.error(f"Exception in celery task !")
        logger.exception(exc)
        self.retry(exc=exc)


@app.task(
    name="integers-sum",
    bind=True,
    worker_prefetch_multiplier=1,
    max_retries=settings.CELERY_MAX_RETRIES,
    task_time_limit=settings.CELERY_TASK_TIME_LIMIT,
    task_soft_time_limit=settings.CELERY_TASK_SOFT_TIME_LIMIT)
def integers_sum(self, integers: List[int]) -> int:
    """ celery task - Sum integers generated by previous tasks """

    try:
        return sum(integers)

    except Exception as exc:
        logger.error(f"Exception in celery task !")
        logger.exception(exc)
        self.retry(exc=exc)
